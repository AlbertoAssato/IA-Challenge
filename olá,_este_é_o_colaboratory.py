# -*- coding: utf-8 -*-
"""Olá, este é o Colaboratory

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

data=pd.read_csv('Healthcare-Diabetes.csv')

df=pd.DataFrame(data)

df.head()

df.columns

df = df[['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness',
       'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']]

df.info()

df.isna().sum()

shap=df.shape
print(f'Number of rows: {shap[0]} and Number of columns: {shap[1]}')

df.describe()

df2=df[df['Pregnancies']>0.0]

df3=df2[df2['Glucose']>0]

df4=df3[(df3['BloodPressure']>0)&(df3['BloodPressure']<120)]

df5=df4[(df4['SkinThickness']>0)&(df4['SkinThickness']<99)]

df6=df5[(df5['BMI']>0)]

df7=df6[df6['DiabetesPedigreeFunction']<1.8]

df8=df7[(df7['Insulin']>0)&(df7['Insulin'] <= 900)]

df8.describe()

df12=df8.copy()

# Calculate the BMI to Glucose ratio as a percentage
df12['BMI_to_Glucose_Ratio'] = (df12['BMI'] / df12['Glucose']) * 100

# Calculate the Age to BloodPressure ratio as a percentage
df12['Age_to_BloodPressure_Ratio'] = (df12['Age'] / df12['BloodPressure']) * 100

# Calculate the Pregnancies to DiabetesHistory ratio as a percentage
df12['Pregnancies_to_DiabetesHistory_Ratio'] = (df12['Pregnancies'] / df12['DiabetesPedigreeFunction'])

# Calculate the Insulin to Glucose ratio as a percentage
df12['Insulin_to_Glucose_Ratio'] = (df12['Insulin'] / df12['Glucose']) * 10

# Calculate the Age to BMI ratio as a percentage
df12['Age_to_BMI_Ratio'] = (df12['Age'] / df12['BMI']) * 10

# Print the results
ratio=round(df12[['BMI_to_Glucose_Ratio', 'Age_to_BloodPressure_Ratio',
                  'Pregnancies_to_DiabetesHistory_Ratio', 'Insulin_to_Glucose_Ratio', 'Age_to_BMI_Ratio']].mean(),2)
print(f'''
1) BMI_to_Glucose_Ratio: {ratio[0]}%

2) Age_to_BloodPressure_Ratio: {ratio[1]}%

3) Pregnancies_to_DiabetesHistory_Ratio: {ratio[2]}%

4) Insulin_to_Glucose_Ratio: {ratio[3]}%

5) Age_to_BMI_Ratio: {ratio[4]}%
''')

from sklearn import tree

y=df8[['Outcome']]

x=[]

for i in range(len(df8)):
    x.append([df8['Glucose'].iloc[i],df8['BloodPressure'].iloc[i],df8['SkinThickness'].iloc[i],df8['Insulin'].iloc[i],
             df8['BMI'].iloc[i]])

clf = tree.DecisionTreeRegressor()
clf = clf.fit(x,y)

number=int(input('Enter a number: '))

list_numbers=[]
for i in range(number):
    print(f'------list {i+1}--------')

    num1=int(input('Enter a number Glucose: '))
    num2=int(input('Enter a number BloodPressure: '))
    num3=int(input('Enter a number SkinThickness: '))
    num4=int(input('Enter a number Insulin: '))
    num5=int(input('Enter a number BMI: '))

    lists=[num1,num2,num3,num4,num5]
    list_numbers.append(lists)

new_data = list_numbers
answer = clf.predict(new_data)

for i in range(len(new_data)):
    if answer[i]==1:
        print(f'Person: {i+1} ==> Diabetics')
    elif answer[i]==0:
        print(f'Person: {i+1} ==> Non-diabetics')