# -*- coding: utf-8 -*-
"""3°Sprint-prototipo1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OpPtgAnwNQLkfBDLmOZvVIA9V8vtciXY
"""

# Importação das bibliotecas necessárias para análise de dados e visualização
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

# Carregando o dataset
data=pd.read_csv('Healthcare-Diabetes.csv')

# Convertendo o dataset em um DataFrame do Pandas
df=pd.DataFrame(data)

# Exibindo as 5 primeiras linhas do DataFrame
df.head()

# Exibindo o nome de todas as colunas do DataFrame
df.columns

# Selecionando colunas relevantes para o estudo
df = df[['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness',
       'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']]

# Exibindo informações básicas sobre o DataFrame (tipos de dados, valores nulos, etc.)
df.info()

# Verificando a quantidade de valores ausentes (NaN) em cada coluna
df.isna().sum()

# Exibindo o número de linhas e colunas do DataFrame
shap=df.shape
print(f'Number of rows: {shap[0]} and Number of columns: {shap[1]}')

# Resumo estatístico do DataFrame
df.describe()

# Filtrando dados onde 'Pregnancies' é maior que 0
df2=df[df['Pregnancies']>0.0]

# Filtrando dados onde 'Glucose' é maior que 0
df3=df2[df2['Glucose']>0]

# Filtrando dados onde 'BloodPressure' está entre 0 e 120
df4=df3[(df3['BloodPressure']>0)&(df3['BloodPressure']<120)]

# Filtrando dados onde 'SkinThickness' está entre 0 e 99
df5=df4[(df4['SkinThickness']>0)&(df4['SkinThickness']<99)]

# Filtrando dados onde 'BMI' é maior que 0
df6=df5[(df5['BMI']>0)]

# Filtrando dados onde 'DiabetesPedigreeFunction' é menor que 1.8
df7=df6[df6['DiabetesPedigreeFunction']<1.8]

# Filtrando dados onde 'Insulin' está entre 0 e 900
df8=df7[(df7['Insulin']>0)&(df7['Insulin'] <= 900)]

# Exibindo o resumo estatístico do DataFrame após as filtragens
df8.describe()

# Criando uma cópia do DataFrame filtrado para evitar modificar o original
df12=df8.copy()

# Calculando a razão entre 'BMI' e 'Glucose' em percentual e adicionando como nova coluna
df12['BMI_to_Glucose_Ratio'] = (df12['BMI'] / df12['Glucose']) * 100

# Calculando a razão entre 'Age' e 'BloodPressure' em percentual e adicionando como nova coluna
df12['Age_to_BloodPressure_Ratio'] = (df12['Age'] / df12['BloodPressure']) * 100

# Calculando a razão entre 'Pregnancies' e 'DiabetesPedigreeFunction' e adicionando como nova coluna
df12['Pregnancies_to_DiabetesHistory_Ratio'] = (df12['Pregnancies'] / df12['DiabetesPedigreeFunction'])

# Calculando a razão entre 'Insulin' e 'Glucose' em percentual e adicionando como nova coluna
df12['Insulin_to_Glucose_Ratio'] = (df12['Insulin'] / df12['Glucose']) * 10

# Calculando a razão entre 'Age' e 'BMI' em percentual e adicionando como nova coluna
df12['Age_to_BMI_Ratio'] = (df12['Age'] / df12['BMI']) * 10

# Exibindo a média arredondada dos valores calculados de cada razão em forma de porcentagem
ratio=round(df12[['BMI_to_Glucose_Ratio', 'Age_to_BloodPressure_Ratio',
                  'Pregnancies_to_DiabetesHistory_Ratio', 'Insulin_to_Glucose_Ratio', 'Age_to_BMI_Ratio']].mean(),2)
print(f'''
1) BMI_to_Glucose_Ratio: {ratio[0]}%

2) Age_to_BloodPressure_Ratio: {ratio[1]}%

3) Pregnancies_to_DiabetesHistory_Ratio: {ratio[2]}%

4) Insulin_to_Glucose_Ratio: {ratio[3]}%

5) Age_to_BMI_Ratio: {ratio[4]}%
''')

# Importando o módulo de árvore de decisão da biblioteca sklearn
from sklearn import tree

# Definindo 'Outcome' como variável alvo (dependente)
y=df8[['Outcome']]

# Definindo 'x' como lista de variáveis independentes ('Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI')
x=[]

# Criando uma lista com os valores das variáveis independentes
for i in range(len(df8)):
    x.append([df8['Glucose'].iloc[i],df8['BloodPressure'].iloc[i],df8['SkinThickness'].iloc[i],df8['Insulin'].iloc[i],
             df8['BMI'].iloc[i]])

# Criando e treinando o modelo de regressão por árvore de decisão
clf = tree.DecisionTreeRegressor()
clf = clf.fit(x,y)

# Solicitando ao usuário que insira um número de previsões que deseja fazer
number=int(input('Enter a number: '))

# Inicializando uma lista para armazenar as previsões
ist_numbers=[]
for i in range(number):
    print(f'------list {i+1}--------')

    # Coletando os valores de 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', e 'BMI' para cada previsão
    num1=int(input('Enter a number Glucose: '))
    num2=int(input('Enter a number BloodPressure: '))
    num3=int(input('Enter a number SkinThickness: '))
    num4=int(input('Enter a number Insulin: '))
    num5=int(input('Enter a number BMI: '))

    # Armazenando os valores coletados em uma lista
    lists=[num1,num2,num3,num4,num5]
    list_numbers.append(lists)

# Usando o modelo treinado para prever se os novos dados indicam diabetes ou não
new_data = list_numbers
answer = clf.predict(new_data)

# Exibindo o resultado das previsões para cada pessoa
for i in range(len(new_data)):
    if answer[i]==1:
        print(f'Person: {i+1} ==> Diabetics')
    elif answer[i]==0:
        print(f'Person: {i+1} ==> Non-diabetics')